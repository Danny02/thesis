{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/222",
  "id": 154095890,
  "number": 222,
  "title": "[Feature] keep alignment inside for comprehension (and other constructs?)",
  "user": {
    "login": "Daxten",
    "id": 1048786,
    "avatar_url": "https://avatars.githubusercontent.com/u/1048786?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Daxten",
    "html_url": "https://github.com/Daxten",
    "followers_url": "https://api.github.com/users/Daxten/followers",
    "following_url": "https://api.github.com/users/Daxten/following{/other_user}",
    "gists_url": "https://api.github.com/users/Daxten/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Daxten/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Daxten/subscriptions",
    "organizations_url": "https://api.github.com/users/Daxten/orgs",
    "repos_url": "https://api.github.com/users/Daxten/repos",
    "events_url": "https://api.github.com/users/Daxten/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Daxten/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/labels/alignment",
      "name": "alignment",
      "color": "0052cc"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/218277915",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/222#issuecomment-218277915",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222",
      "id": 218277915,
      "user": {
        "login": "Daxten",
        "id": 1048786,
        "avatar_url": "https://avatars.githubusercontent.com/u/1048786?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Daxten",
        "html_url": "https://github.com/Daxten",
        "followers_url": "https://api.github.com/users/Daxten/followers",
        "following_url": "https://api.github.com/users/Daxten/following{/other_user}",
        "gists_url": "https://api.github.com/users/Daxten/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Daxten/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Daxten/subscriptions",
        "organizations_url": "https://api.github.com/users/Daxten/orgs",
        "repos_url": "https://api.github.com/users/Daxten/repos",
        "events_url": "https://api.github.com/users/Daxten/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Daxten/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-10 20:17:06 UTC",
      "updated_at": "2016-05-10 20:17:06 UTC",
      "body": "could be a dupe of this: https://github.com/olafurpg/scalafmt/issues/185"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/218293645",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/222#issuecomment-218293645",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/222",
      "id": 218293645,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-10 21:14:16 UTC",
      "updated_at": "2016-05-10 21:14:16 UTC",
      "body": "I agree this would be nice to have, and probably related to #185. As discussed on gitter, it's not something I expect to work on soon. However, please add the expected output, it makes it a lot easier to start with a failing test."
    }
  ],
  "created_at": "2016-05-10 20:12:48 UTC",
  "updated_at": "2016-05-11 08:08:24 UTC",
  "closed_at": null,
  "body": "```scala\r\n    for {\r\n      username <- Some(\"username\")                              |> HttpResult.fromOption(BadRequest(\"Username missing from request\"))\r\n      user     <- Future.successful(Some(BaseUser(1, \"aname\"))) |> HttpResult.fromFOption(NotFound(\"User not found\"))\r\n      email = s\"${user.name}@emailprovider.de\"\r\n      validatedEmail <- validateEmail(email)    |> HttpResult.fromEither(InternalServerError(_))\r\n      success        <- Future.successful(true) |> HttpResult.fromFuture\r\n    } yield {\r\n      if (success) Ok(\"Mail successfully sent!\")\r\n      else InternalServerError(\"Failed to send email :(\")\r\n    }\r\n```\r\nexpected:\r\n```\r\n    for {\r\n      username       <- Some(\"username\")                              |> HttpResult.fromOption(BadRequest(\"Username missing from request\"))\r\n      user           <- Future.successful(Some(BaseUser(1, \"aname\"))) |> HttpResult.fromFOption(NotFound(\"User not found\"))\r\n      email = s\"${user.name}@emailprovider.de\"\r\n      validatedEmail <- validateEmail(email)                          |> HttpResult.fromEither(InternalServerError(_))\r\n      success        <- Future.successful(true)                       |> HttpResult.fromFuture\r\n    } yield {\r\n      if (success) Ok(\"Mail successfully sent!\")\r\n      else InternalServerError(\"Failed to send email :(\")\r\n    }\r\n```\r\nI think it would make sense if for-comprehensions would try to keep the same alignment for all lines, even if it gets broken by sth. different.\r\nmaybe this would be also usefull for other constructs"
}