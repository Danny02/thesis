{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/171",
  "id": 148449309,
  "number": 171,
  "title": "One-expression defs",
  "user": {
    "login": "paulp",
    "id": 9135,
    "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulp",
    "html_url": "https://github.com/paulp",
    "followers_url": "https://api.github.com/users/paulp/followers",
    "following_url": "https://api.github.com/users/paulp/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
    "organizations_url": "https://api.github.com/users/paulp/orgs",
    "repos_url": "https://api.github.com/users/paulp/repos",
    "events_url": "https://api.github.com/users/paulp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210381767",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/171#issuecomment-210381767",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171",
      "id": 210381767,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 09:28:04 UTC",
      "updated_at": "2016-04-15 09:28:04 UTC",
      "body": "I agree that `oneOf` should stay on the original line. Scalafmt does the correct thing for single expressions ending with `{}` blocks. We can do something similar for `()` applications.\r\n\r\n> This is also another motivating example of why alignment needs to be inferred from what's there. Attempts to anticipate it will always be incomplete, as seen in what happens to ^^.\r\n\r\nIn this case, isn't it possible to configure `alignTokens` to include `^^;ApplyInfix`?\r\n\r\n```scala\r\n$ scalafmt -f foo.scala --alignTokens \"^^;ApplyInfix,->;ApplyInfix\" --maxColumn 160\r\nobject Generator {\r\n  def viewMethod: Gen[ViewClass.Op] =\r\n    oneOf(\r\n        lowHalf     ^^ lop(n => s\"drop $n\"   -> (_ drop n)),\r\n        highHalf    ^^ lop(n => s\"take $n\"   -> (_ take n)),\r\n        chooseMax   ^^ lop(n => s\"dropR $n\"  -> (_ dropRight n)),\r\n        chooseMax   ^^ lop(n => s\"takeR $n\"  -> (_ takeRight n)),\r\n        lowHalf     ^^ lop(n => s\"dropW <$n\" -> (_ dropWhile less(n))),\r\n        lowHalf     ^^ lop(n => s\"takeW <$n\" -> (_ takeWhile less(n))),\r\n        chooseSmall ^^ lop(n => s\"*$n\"       -> (_ map multiply(n))),\r\n        chooseSmall ^^ lop(n => s\"/$n\"       -> (_ withFilter divides(n))),\r\n        chooseSmall ^^ lop(n => s\"!/$n\"      -> (_ filterNot divides(n))),\r\n        chooseSmall ^^ lop(n => s\"%/$n\"      -> (_ collect Partial(divides(n), _ / n))),\r\n        chooseSmall ^^ lop(n => s\"x=>(x, x)\" -> (_ flatMap (x => vec(x, x)))),\r\n        chooseRange ^^ lop(r => s\"slice $r\"  -> (_ slice r))\r\n    )\r\n}\r\n```"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210382619",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/171#issuecomment-210382619",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/171",
      "id": 210382619,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 09:30:12 UTC",
      "updated_at": "2016-04-15 09:30:12 UTC",
      "body": "My issue with inferring alignment is that it makes it harder for the user to control the formatting output, putting a bigger burden on the maintainer of scalafmt to always Do The Right Thing. "
    }
  ],
  "created_at": "2016-04-14 18:47:33 UTC",
  "updated_at": "2016-04-19 15:54:26 UTC",
  "closed_at": "2016-04-19 15:54:21 UTC",
  "body": "Original:\r\n```scala\r\ndef viewMethod: Gen[ViewClass.Op] = oneOf(\r\n  lowHalf     ^^ lop(n => s\"drop $n\"   -> (_ drop n)),\r\n  highHalf    ^^ lop(n => s\"take $n\"   -> (_ take n)),\r\n  chooseMax   ^^ lop(n => s\"dropR $n\"  -> (_ dropRight n)),\r\n  chooseMax   ^^ lop(n => s\"takeR $n\"  -> (_ takeRight n)),\r\n  lowHalf     ^^ lop(n => s\"dropW <$n\" -> (_ dropWhile less(n))),\r\n  lowHalf     ^^ lop(n => s\"takeW <$n\" -> (_ takeWhile less(n))),\r\n  chooseSmall ^^ lop(n => s\"*$n\"       -> (_ map multiply(n))),\r\n  chooseSmall ^^ lop(n => s\"/$n\"       -> (_ withFilter divides(n))),\r\n  chooseSmall ^^ lop(n => s\"!/$n\"      -> (_ filterNot divides(n))),\r\n  chooseSmall ^^ lop(n => s\"%/$n\"      -> (_ collect Partial(divides(n), _ / n))),\r\n  chooseSmall ^^ lop(n => s\"x=>(x, x)\" -> (_ flatMap (x => vec(x, x)))),\r\n  chooseRange ^^ lop(r => s\"slice $r\"  -> (_ slice r))\r\n)\r\n```\r\n\r\nScalafmt:\r\n```scala\r\ndef viewMethod: Gen[ViewClass.Op] =\r\n  oneOf(\r\n      lowHalf ^^ lop(n => s\"drop $n\"       -> (_ drop n)),\r\n      highHalf ^^ lop(n => s\"take $n\"      -> (_ take n)),\r\n      chooseMax ^^ lop(n => s\"dropR $n\"    -> (_ dropRight n)),\r\n      chooseMax ^^ lop(n => s\"takeR $n\"    -> (_ takeRight n)),\r\n      lowHalf ^^ lop(n => s\"dropW <$n\"     -> (_ dropWhile less(n))),\r\n      lowHalf ^^ lop(n => s\"takeW <$n\"     -> (_ takeWhile less(n))),\r\n      chooseSmall ^^ lop(n => s\"*$n\"       -> (_ map multiply(n))),\r\n      chooseSmall ^^ lop(n => s\"/$n\"       -> (_ withFilter divides(n))),\r\n      chooseSmall ^^ lop(n => s\"!/$n\"      -> (_ filterNot divides(n))),\r\n      chooseSmall ^^ lop(n => s\"%/$n\"      -> (_ collect Partial(divides(n), _ / n))),\r\n      chooseSmall ^^ lop(n => s\"x=>(x, x)\" -> (_ flatMap (x => vec(x, x)))),\r\n      chooseRange ^^ lop(r => s\"slice $r\"  -> (_ slice r))\r\n  )\r\n```\r\n\r\nI would like it to look like the original. The reformatted version adds two unnecessary indentation levels and loses an important property of the original, which is that it's effectively impossible to add a second statement without realizing that the second statement is just floating in the enclosing block, not part of that def. In the reformatted version that protection becomes tenuous.\r\n\r\nThis is also another motivating example of why alignment needs to be inferred from what's there. Attempts to anticipate it will always be incomplete, as seen in what happens to `^^`.\r\n\r\nUsing 0.2.1 `scalafmt --style defaultWithAlign --maxColumn 160`."
}