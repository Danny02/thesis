{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/299",
  "id": 157753650,
  "number": 299,
  "title": "Automatically reformat filesÂ after an active editing session",
  "user": {
    "login": "olafurpg",
    "id": 1408093,
    "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/olafurpg",
    "html_url": "https://github.com/olafurpg",
    "followers_url": "https://api.github.com/users/olafurpg/followers",
    "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
    "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
    "organizations_url": "https://api.github.com/users/olafurpg/orgs",
    "repos_url": "https://api.github.com/users/olafurpg/repos",
    "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/olafurpg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/labels/enhancement",
      "name": "enhancement",
      "color": "84b6eb"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/labels/up%20for%20debate",
      "name": "up for debate",
      "color": "5319e7"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222819617",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222819617",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222819617,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:02:50 UTC",
      "updated_at": "2016-05-31 21:02:50 UTC",
      "body": "Seems like this would work best as an editor plugin, but being able to do it at the SBT level, even for a subset of editors, seems extremely cool.  It would allow the code formatting question to remain part of the semantic \"build question\" as opposed to part of the \"editor question\".  On a team cultural level, I think that distinction is very significant, since the former is a team consensus subject to pull requests and compromise, while the latter is a domain of fierce personal choice."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222828173",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222828173",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222828173,
      "user": {
        "login": "sjrd",
        "id": 535934,
        "avatar_url": "https://avatars.githubusercontent.com/u/535934?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sjrd",
        "html_url": "https://github.com/sjrd",
        "followers_url": "https://api.github.com/users/sjrd/followers",
        "following_url": "https://api.github.com/users/sjrd/following{/other_user}",
        "gists_url": "https://api.github.com/users/sjrd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sjrd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sjrd/subscriptions",
        "organizations_url": "https://api.github.com/users/sjrd/orgs",
        "repos_url": "https://api.github.com/users/sjrd/repos",
        "events_url": "https://api.github.com/users/sjrd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sjrd/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:34:09 UTC",
      "updated_at": "2016-05-31 21:34:09 UTC",
      "body": "> being able to do it at the SBT level, even for a subset of editors, seems extremely cool\r\n\r\nI disagree. This is entirely specific to an editor.\r\n\r\n>  It would allow the code formatting question to remain part of the semantic \"build question\" as opposed to part of the \"editor question\".\r\n\r\nFor the \"build question\", you have `scalafmtTest`. That is definitely build-related, as it impacts CI. The reformat-on-compile is not build-related, IMO."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222830304",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222830304",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222830304,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:42:18 UTC",
      "updated_at": "2016-05-31 21:42:21 UTC",
      "body": "My original idea in #295 was actually specifically trying to configure reformat-on-compile to *not* reformat files which have dirty buffers.  I think the OP is a cool idea too, for the reasons stated, but it is a bit of an extension of what I was thinking.  :-)"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222831720",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222831720",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222831720,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:48:22 UTC",
      "updated_at": "2016-05-31 21:48:22 UTC",
      "body": "@djspiewak I apologize for hijacking your idea :)\r\n\r\n> configure reformat-on-compile to not reformat files which have dirty buffers\r\n\r\nThis is challenging for the reason number 2 above. I still think it's possible to implement. One approach that might work:\r\n\r\n* before reformatting file, check if file has a dirty buffer,\r\n* if file has dirty buffer, add file into a queue\r\n* on every reformat, try to empty queue\r\n"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222832050",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222832050",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222832050,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:49:56 UTC",
      "updated_at": "2016-05-31 21:49:56 UTC",
      "body": "@olafurpg I don't think it quite has to be that complicated.  If a file has a dirty buffer, then eventually it will be saved.  When it is saved, it will (by definition) be part of the file set that SBT computes as needing to be compiled.  So you can safely just ignore any files that have dirty buffers."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/222834085",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/299#issuecomment-222834085",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/299",
      "id": 222834085,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-31 21:58:53 UTC",
      "updated_at": "2016-05-31 21:59:05 UTC",
      "body": "I see, skipping the fileÂ might be sufficient. This could easily be added here: https://github.com/olafurpg/scalafmt/blob/6adefe05cc43c914569e181c1061153dafd88528/scalafmtSbt/src/main/scala/org/scalafmt/sbt/HasScalaFmt.scala#L80"
    }
  ],
  "created_at": "2016-05-31 19:43:29 UTC",
  "updated_at": "2016-05-31 21:59:05 UTC",
  "closed_at": null,
  "body": "Interesting suggestion from @djspiewak in #295. I can see this being an incredibly useful feature. Question is whether this should belong in the SBT plugin or in the text editor integrations asÂ some sort of \"reformat on unfocus\" action.\r\n\r\nMy problem with implementing this as part of the SBT plugin is:\r\n1. It's limited to text editors that create swap files in the same directory as the file. For example, I set my vim to put the swap files in `/tmp` and IntelliJ doesn't leave any swap files.\r\n2. It would be tricky to get right since the current `reformatOnCompileSettings` implementation taps into the incremental compiler to know which files to format. The SBT plugin would need to know when the swap file is removed to know that it should reformat the source file.\r\n\r\nBy integrating this directly, I imagine the user experience would be smoother. However, if someone wants to take a stab at this in the SBT plugin, the relevant line of code is here: https://github.com/olafurpg/scalafmt/blob/6adefe05cc43c914569e181c1061153dafd88528/scalafmtSbt/src/main/scala/org/scalafmt/sbt/HasScalaFmt.scala#L46\r\n"
}