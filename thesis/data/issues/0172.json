{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/172",
  "id": 148452896,
  "number": 172,
  "title": "AlignTab style alignment configuration",
  "user": {
    "login": "paulp",
    "id": 9135,
    "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulp",
    "html_url": "https://github.com/paulp",
    "followers_url": "https://api.github.com/users/paulp/followers",
    "following_url": "https://api.github.com/users/paulp/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
    "organizations_url": "https://api.github.com/users/paulp/orgs",
    "repos_url": "https://api.github.com/users/paulp/repos",
    "events_url": "https://api.github.com/users/paulp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/labels/help%20wanted",
      "name": "help wanted",
      "color": "159818"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "milestone": {
    "url": "https://api.github.com/repos/olafurpg/scalafmt/milestones/2",
    "html_url": "https://github.com/olafurpg/scalafmt/milestones/0.3",
    "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/milestones/2/labels",
    "id": 1702256,
    "number": 2,
    "title": "0.3",
    "description": "Adds incremental formatting for blazingly fast formatting even on massive source files.",
    "creator": {
      "login": "olafurpg",
      "id": 1408093,
      "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olafurpg",
      "html_url": "https://github.com/olafurpg",
      "followers_url": "https://api.github.com/users/olafurpg/followers",
      "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
      "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
      "organizations_url": "https://api.github.com/users/olafurpg/orgs",
      "repos_url": "https://api.github.com/users/olafurpg/repos",
      "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olafurpg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 4,
    "closed_issues": 1,
    "state": "open",
    "created_at": "2016-04-12 19:35:54 UTC",
    "updated_at": "2016-05-16 20:40:17 UTC",
    "due_on": null,
    "closed_at": null
  },
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210445887",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-210445887",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 210445887,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 12:28:32 UTC",
      "updated_at": "2016-04-15 12:43:48 UTC",
      "body": "My problem with alignment inference is false positives, that is aligning by tokens that aren't supposed to be aligned. It leaves the user with no hope to get the formatting they want it to look like without waiting for scalafmt to improve.\r\n\r\nAlso, I believe that the most demanding users probably appreciate more powerful configuration language.\r\n\r\nFinally, automatically inferring alignment forces you to write the aligned code in the first place.\r\n\r\nEDIT. for some reason my comment got submitted before it was ready."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210473962",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-210473962",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 210473962,
      "user": {
        "login": "paulp",
        "id": 9135,
        "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulp",
        "html_url": "https://github.com/paulp",
        "followers_url": "https://api.github.com/users/paulp/followers",
        "following_url": "https://api.github.com/users/paulp/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
        "organizations_url": "https://api.github.com/users/paulp/orgs",
        "repos_url": "https://api.github.com/users/paulp/repos",
        "events_url": "https://api.github.com/users/paulp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulp/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 13:59:46 UTC",
      "updated_at": "2016-04-15 13:59:46 UTC",
      "body": "Inferring alignment doesn't \"force\" you to write the aligned code in the first place. That has already happened. Inferring it prevents the formatter from destroying the alignment which was already there.\r\n\r\nIf the configuration language is equal in power to https://github.com/randy3k/AlignTab then I could probably configure all this in one place and use the same configuration everywhere. But enumerating the names of individual operators like `^^` isn't going to fly. The promise of a code formatter is to be able to fork a large project, then 1) format all its code and 2) apply the formatter automatically from that point forward. I can't do 1) if the formatter is prone to breaking code, as in the stripMargin case, and I can't do 2) if the formatter will break any introduced formatting unless the format configuration is hand massaged.\r\n\r\nI addressed false positives when I first mentioned it, but surely it's clear that ten lines in a row which have `^^` in the same columns has the same chance of being a false positive as earth does of being hit by an asteroid in the next nanosecond. It's simply a question of where you draw the line. If false positives are a problem, the line was drawn in the wrong place."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210509662",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-210509662",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 210509662,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 15:36:05 UTC",
      "updated_at": "2016-04-15 15:36:05 UTC",
      "body": "Fine. I won't argue against the merit of this idea. I also agree that enumerating all the individual operators is insufficient for super users like yourself.\r\n\r\nI would appreciate input from more folks on this. How many users are affected by the limitations of the current vertical alignment implementation?\r\n\r\nI need more time to wrap my head around alignment inference. Maybe some hands-on experience with AlignTab could help."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/211098045",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-211098045",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 211098045,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-17 19:47:38 UTC",
      "updated_at": "2016-04-17 19:47:38 UTC",
      "body": "I tried AlignTab and I think going that direction would be better than inferring alignment. We could support configuration like\r\n\r\n```scala\r\n// only tokens that match the same category will align together\r\ncase class AlignToken(category: String, regexp: String)\r\n\r\n// scala configuration\r\nAlignToken(\"sbt_operator\", \"[&|@#<+:~]+[=]\")\r\n// cli configuration\r\n--addAlignToken \"sbt_operator;[&|@#<+:~]+[=]\"\r\n```\r\nOn top of the plain regex match, scalafmt can behind the scenes assure that we don't align tokens with owners of different type.\r\n\r\nHow important are the aligntab options (justification and space configuration)?. I think scalafmt may be able to infer if there should be a space or no space. Right justification gives marginal benefits over left justification in my opinion (looks very fancy though)."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/211117827",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-211117827",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 211117827,
      "user": {
        "login": "paulp",
        "id": 9135,
        "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulp",
        "html_url": "https://github.com/paulp",
        "followers_url": "https://api.github.com/users/paulp/followers",
        "following_url": "https://api.github.com/users/paulp/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
        "organizations_url": "https://api.github.com/users/paulp/orgs",
        "repos_url": "https://api.github.com/users/paulp/repos",
        "events_url": "https://api.github.com/users/paulp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulp/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-17 21:20:11 UTC",
      "updated_at": "2016-04-17 21:20:11 UTC",
      "body": "> How important are the aligntab options (justification and space configuration)\r\n\r\nImportant. Sometimes, they make all the difference. For instance, left justification is materially worse in a situation such as\r\n```\r\n                organization :=  \"org.improving\",\r\n    scalacOptions in compile ++= Seq(\"-Ywarn-unused\", \"-Ywarn-unused-import\"),\r\n         libraryDependencies +=  \"com.novocode\" % \"junit-interface\" % \"0.11\" % \"test\",\r\n                    licenses :=  Seq(\"Apache-2.0\" -> url(\"http://www.apache.org/licenses/LICENSE-2.0\")),\r\n                scalaVersion :=  \"2.11.8\",\r\n                 logBuffered :=  false,\r\n                   maxErrors :=  15,\r\n            triggeredMessage :=  Watched.clearWhenTriggered\r\n```\r\nHaving even one long key name (and sbt and plugins are happy to inflict ridiculously long key names on you) can create enough whitespace between keys and values to make one uncertain what goes with what. There's no reason to live with uncertainty of that kind.\r\n\r\nThe presence or absence of a space is often quite important. The quest for information aesthetics is a precision undertaking."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/211359227",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/172#issuecomment-211359227",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/172",
      "id": 211359227,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-18 12:33:10 UTC",
      "updated_at": "2016-04-18 12:33:10 UTC",
      "body": "I see the use case for right justified columns in sbt column.\r\n\r\nI can't promise when this will be implemented. I've assigned the 0.3 milestone, but it may be postponed to a later release.\r\n\r\nI'm happy to help out if someone is interested contributing an implementation. The [implementation that decides which columns match](https://github.com/olafurpg/scalafmt/blob/d38c94e002477b8c47ab2dea7d5eee23f002a12b/core/src/main/scala/org/scalafmt/internal/FormatWriter.scala#L159) is quite separate from the rest of the alignment implementation. See `isCandidate` for how tokens get picked for alignment. We would also have to change the `alignTokens` member of `ScalafmtStyle`.\r\n\r\nAlso, the `alignmentTokens` implementation is super imperative/ugly/flaky and may be worth refactoring. It does not reflect my typical coding style."
    }
  ],
  "created_at": "2016-04-14 19:01:09 UTC",
  "updated_at": "2016-04-18 12:33:18 UTC",
  "closed_at": null,
  "body": "[Sorry, I'm not trying to spread out over multiple tickets without cause. Please feel free to consolidate my comments as you deem appropriate.]\r\n\r\nAn example of where alignment inference is needed. See what happens to the function arrows.\r\n\r\nThe thing about vertical alignment is that anyone who wants it is prone to be using it already to communicate information to the code reader. Such a person will invariably be unenthusiastic about seeing that hard-fought alignment destroyed by the formatter. These people are difficult to satisfy: even the 95% solution stomps meaningful information out of 5% of their code, which prevents them from integrating the formatter directly into the development process where it belongs.\r\n\r\nThus, the compelling motivation to take note of when columns are already aligned and avoid leaving them in disarray.\r\n\r\nOriginal:\r\n```scala\r\n abstract class Laws[A : Eq] {\r\n  def associative(f: BinOp[A]): Forall3[A]               = (a, b, c) => f(a, f(b, c)) === f(f(a, b), c)\r\n  def distributive(f: BinOp[A], g: BinOp[A]): Forall3[A] = (a, b, c) => f(a, g(b, c)) === g(f(a, b), f(a, c))\r\n  def commutative(f: BinOp[A]): Forall2[A]               = (a, b)    => f(a, b) === f(b, a)\r\n  def absorption(f: BinOp[A], g: BinOp[A]): Forall2[A]   = (a, b)    => f(a, g(a, b)) === a\r\n  def identity(f: BinOp[A], id: A): Forall1[A]           = a         => f(a, id) === a\r\n  def idempotence(f: BinOp[A]): Forall1[A]               = a         => f(a, a) === a\r\n }\r\n```\r\nScalafmt:\r\n```scala\r\nabstract class Laws[A : Eq] {\r\n  def associative(f: BinOp[A]): Forall3[A]               = (a, b, c) => f(a, f(b, c)) === f(f(a, b), c)\r\n  def distributive(f: BinOp[A], g: BinOp[A]): Forall3[A] = (a, b, c) => f(a, g(b, c)) === g(f(a, b), f(a, c))\r\n  def commutative(f: BinOp[A]): Forall2[A]               = (a, b) => f(a, b) === f(b, a)\r\n  def absorption(f: BinOp[A], g: BinOp[A]): Forall2[A]   = (a, b) => f(a, g(a, b)) === a\r\n  def identity(f: BinOp[A], id: A): Forall1[A]           = a => f(a, id) === a\r\n  def idempotence(f: BinOp[A]): Forall1[A]               = a => f(a, a) === a\r\n}\r\n```\r\n\r\nI would like the input to look like the original. Sample collected with `scalafmt --style defaultWithAlign --maxColumn 160`."
}