{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/235",
  "id": 154923227,
  "number": 235,
  "title": "More Configurability",
  "user": {
    "login": "djspiewak",
    "id": 752,
    "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/djspiewak",
    "html_url": "https://github.com/djspiewak",
    "followers_url": "https://api.github.com/users/djspiewak/followers",
    "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
    "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
    "organizations_url": "https://api.github.com/users/djspiewak/orgs",
    "repos_url": "https://api.github.com/users/djspiewak/repos",
    "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
    "received_events_url": "https://api.github.com/users/djspiewak/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "milestone": null,
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219303666",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219303666",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219303666,
      "user": {
        "login": "sjrd",
        "id": 535934,
        "avatar_url": "https://avatars.githubusercontent.com/u/535934?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sjrd",
        "html_url": "https://github.com/sjrd",
        "followers_url": "https://api.github.com/users/sjrd/followers",
        "following_url": "https://api.github.com/users/sjrd/following{/other_user}",
        "gists_url": "https://api.github.com/users/sjrd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sjrd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sjrd/subscriptions",
        "organizations_url": "https://api.github.com/users/sjrd/orgs",
        "repos_url": "https://api.github.com/users/sjrd/repos",
        "events_url": "https://api.github.com/users/sjrd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sjrd/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-15 18:56:06 UTC",
      "updated_at": "2016-05-15 18:56:06 UTC",
      "body": "> Configurability of vertical alignment\r\n\r\nIsn't no-vertical-alignment the default? Btw I'm 100% with you, I also find vertical alignment weird.\r\n\r\n> Better control over parameter blocks linebreaking.\r\n\r\nThis is configurable. Enable bin-packing for arguments and/or parameters."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219303855",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219303855",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219303855,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-15 18:59:33 UTC",
      "updated_at": "2016-05-15 19:01:16 UTC",
      "body": "> Isn't no-vertical-alignment the default?\r\n\r\nWhen I was looking at it a week ago, there didn't seem to be *any* valign configuration that I could find.  Doesn't mean it wasn't there, I just couldn't find it.  :-)  That was what led me to assume that it was simply always on.\r\n\r\n> This is configurable. Enable bin-packing for arguments and/or parameters.\r\n\r\nSort of.  It doesn't seem to have the style that I really want.  For example:\r\n\r\n```scala\r\n// formals\r\ndef foo(abc: Int, deff: Int, efg: Int) = {\r\n  stuff\r\n}\r\n\r\n// assuming the above MUST be line broken\r\ndef foo(\r\n    abc: Int,\r\n    deff: Int,\r\n    efg: Int) = {\r\n\r\n  stuff\r\n}\r\n\r\n// actuals\r\nfoo(abc, deff, efg)\r\n\r\nfoo(\r\n  abc,\r\n  deff,\r\n  efg)\r\n```\r\n\r\nNote that the fact that the formals are aligned with the method name is coincidental (obviously forced by the fact that `def` is a three-character keyword).  I just want the double-indent.\r\n\r\nI don't believe there is a way to achieve the above (again, assuming the lines *must* be broken; if not forced, I prefer leaving the lines alone).  Obviously, this isn't the style that everyone desires, which is why I think it should be configurable.  :-)"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219311186",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219311186",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219311186,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-15 21:17:29 UTC",
      "updated_at": "2016-05-15 21:17:29 UTC",
      "body": "I agree that the current configuration options are limited and don't capture all popular coding styles from the Scala community. I am happy to consider new flags.\r\n\r\n> Configurability of vertical alignment\r\n\r\nI admit, the default style does vertically align arguments/parameters by the opening `(`. The current rules are documented [here](https://olafurpg.github.io/scalafmt/#Functionapplication). In #223, I've considered removing option 2. Maybe we should add a flag to disallow option 3 and go straight to option 4 instead.\r\n\r\nAs @sjrd suggests, you can use [\"bin packing\"](https://github.com/olafurpg/scalafmt/blob/594d96b52925b6ebaf42e4323800fdd0644dfac3/core/src/main/scala/org/scalafmt/ScalafmtStyle.scala#L16), like the Scala.js style uses. I see there is no way to enable bin packing without `--style scala.js`. I can fix that in 0.2.4, see #236.\r\n\r\n> what I want is the option to make intraline spacing rules context-free\r\n\r\nThis would be better explained with a code example. Please include the original code, what scalafmt does and what you would like scalafmt to do.\r\n\r\n> Dangling parentheses options\r\n\r\nscalafmt uses dangling parenthesis to detect \"config style\", see [here](https://olafurpg.github.io/scalafmt/#Functionapplication). For your example:\r\n\r\n```scala\r\ndef foo(\r\n    abc: Int,\r\n    deff: Int,\r\n    efg: Int) = {\r\n\r\n  stuff\r\n}\r\n```\r\nYou can put a newline after `efg: Int` and scalafmt will then keep it like that.\r\n\r\nI personally don't like Scalariform's approach to dangling parentheses because I don't see the need for 3 configuration options for something that is -- IMHO -- complete trivia.\r\n\r\n> Better control over parameter blocks linebreaking.\r\n\r\nYes. I agree, and this is way more important than dangling parentheses. But, I will again need clearer examples of how you would like it to be ;) FWIW, I usually call formals \"definition site\" and actuals \"call site\".\r\n\r\n> I prefer leaving the lines alone [for argument lists]\r\n\r\nNote that it's impossible to keep the newlines/spaces after commas in argument lists while adhering to the line length limit. We need a rule/algorithm to decide how to break a line if the line limit is exceeded."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219311617",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219311617",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219311617,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-15 21:26:27 UTC",
      "updated_at": "2016-05-15 21:26:27 UTC",
      "body": "> Also, I did try to implement this myself, but obviously the way configuration is done right now makes that a rather difficult affair.\r\n\r\nWhere did you get stuck? Some configuration options should be quite straightforward to add. I would love to improve the contributor docs to help people hack on scalafmt."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219504710",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219504710",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219504710,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-16 18:25:56 UTC",
      "updated_at": "2016-05-16 18:27:11 UTC",
      "body": "> As @sjrd suggests, you can use \"bin packing\", like the Scala.js style uses. I see there is no way to enable bin packing without --style scala.js. I can fix that in 0.2.4, see #236.\r\n\r\nWell, this isn't *quite* what I want.  If you consider either my definition or call site examples from earlier, I want everything on the same line (as I defined it) unless I hit the line limit, at which point I want everything to break such that each parameter gets their own line.  So, \"all or nothing\" as it were.\r\n\r\n> This would be better explained with a code example. Please include the original code, what scalafmt does and what you would like scalafmt to do.\r\n\r\nIt's a bit of a general rule of thumb, but I'll try to give some examples.  I haven't actually tried these with scalafmt, but that's sort of beside the point.  It's the principle rule that matters:\r\n\r\n```scala\r\nfor {\r\n  a <- foo\r\n  abc <- bar\r\n  (stuff, and, things) = abc\r\n} yield stuff\r\n```\r\n\r\nIn the above snippet, I want it formatted exactly as I typed it.  There are a couple rules in play here.  Off the top of my head:\r\n\r\n- Contents of curly braces (`{}`) are indented exactly one level from surrounding scope\r\n- The generator symbol (`<-`) in a `for`-comprehension is surrounded by exactly one space on each side\r\n  + Note that this is a special case of the \"infix operator\" rule, which is identical\r\n- The assignment symbol (`=`) in all contexts – `for`-comprehension or otherwise – is surrounded by exactly one space on each side\r\n  + Also a special case of infix operators\r\n- Within a tuple declaration or deconstruction, the comma is preceded by zero spaces and followed by exactly one space, with the entire declaration on a single line\r\n  + Special case of the rule for method parameters, formal or actual\r\n\r\nThe point that I'm making is that all of these are rules which we can apply equally by taking any individual line from the snippet and examining it in isolation:\r\n\r\n```scala\r\n(stuff, and, things) = abc\r\n```\r\n\r\nAside from the indentation scope, which is clearly contextual, we know everything we need to know about how to format this line by looking at *just* this line.  (note: line limit messes with this, and I'll come back to that point)\r\n\r\nThis is in contrast to any vertical alignment scheme.  For example:\r\n\r\n```scala\r\nfor {\r\n  a   <- foo\r\n  abc <- bar\r\n  (stuff, and, things) = abc\r\n} yield stuff\r\n\r\n// or, perhaps?\r\nfor {\r\n  a                   <- foo\r\n  abc                 <- bar\r\n  (stuff, and, things) = abc\r\n} yield stuff\r\n```\r\n\r\nIn both cases, the rules for formatting each individual line are broken by the fact that their context dictates something else.  In the upper case, `a <- foo` is no longer formatted correctly according to the ruleset I gave, and is instead preceded by three spaces (to align with `abc <- bar`).  This is even more egregious in the second option for alignment, where both generators are broken by the extraction.\r\n\r\nFor me, the context-free formatting ruleset is paramount.  I read things in a line-oriented fashion, which means that I have a hard time actually recognizing what language construct is in use when a line looks like this: `a                   <- foo`.  The formatting of every line should be independent of the line above or below it, except with respect to indentation scope and line breaking.\r\n\r\nSpeaking of line breaking, this is clearly where things get wonky, and it's an area where I absolutely love the foundation that scalafmt lays.  Knuth's algorithm is fantastic, and it's a brilliant tool for the job, because clearly context-free formatting no longer works when you're trying to decide on the least-awful line breaking schema.\r\n\r\nBut absent line breaking, and ignoring indentation scope, all intraline formatting should be completely context-free.  Or rather, I want the option of configuring this to be the case.  Equivalently, changing/removing/introducing a line above or below the current one in such a way that does not either exceed the line limit or introduce/remove an indentation scope must *not* affect the formatting of the current line.\r\n\r\n> I personally don't like Scalariform's approach to dangling parentheses because I don't see the need for 3 configuration options for something that is -- IMHO -- complete trivia.\r\n\r\nA dubious line to take with a code formatter.  :-)  It's *all* trivia.  Make it all configurable, because some people find various trivia more important than others.\r\n\r\nI think scalariform could probably drop the third option (\"preserve\"), since the only time I would use that option is in DSL blocks.  For example, when I'm using parser combinators:\r\n\r\n```scala\r\nlazy val expr = (\r\n    expr ~ \"+\" ~ expr\r\n  | expr ~ \"-\" ~ expr\r\n  | \"\"\"\\d+\"\"\".r\r\n)\r\n```\r\n\r\nThis is obviously a massive violation of all of my formatting rules (including context independence), including but not limited to trailing parentheses.  But it's a specific DSL, so I don't care.  In the event of a non-DSL example, I prefer to keep parentheses on the final line (to distinguish them visually from curly braces, which I push to the next line):\r\n\r\n```scala\r\n{\r\n  List(\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5)\r\n}\r\n```\r\n\r\nSo ignoring the DSL case, that's really just two formatting options: same line, or next line.  It's important to have those two; we don't need scalariform's third so long as we do have the ability to exempt blocks (e.g. DSLs) from reformatting.\r\n\r\n> Yes. I agree, and this is way more important than dangling parentheses. But, I will again need clearer examples of how you would like it to be ;) FWIW, I usually call formals \"definition site\" and actuals \"call site\".\r\n\r\nWe can start gathering examples, obviously.  It is worth noting that I wrote the original version of the [Scala Style Guide](http://docs.scala-lang.org/style/), and I still ascribe to nearly all of its guidelines.  The \"minimum viable\" bar for me, personally, would be a sufficiently rich set of configuration options as to allow me to configure scalafmt to match that style (within the bounds of where the guide is ambiguous, obviously).\r\n\r\n> Note that it's impossible to keep the newlines/spaces after commas in argument lists while adhering to the line length limit. We need a rule/algorithm to decide how to break a line if the line limit is exceeded.\r\n\r\nObviously.  :-)\r\n\r\n> Where did you get stuck? Some configuration options should be quite straightforward to add. I would love to improve the contributor docs to help people hack on scalafmt.\r\n\r\nI stopped at the point where I discovered that the configuration options were mostly hard-coded and implemented in an ad hoc way.  I don't have a better way of doing it, off-hand, so don't take that as a direct criticism.  :-)  I just realized that what I wanted to do was going to be a more significant project than I had anticipated, and there were far fewer options already-implemented than I had expected, so I stopped."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219516909",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219516909",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219516909,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-16 19:08:13 UTC",
      "updated_at": "2016-05-16 19:08:13 UTC",
      "body": "> I want everything on the same line (as I defined it) unless I hit the line limit, at which point I want everything to break such that each parameter gets their own line.\r\n\r\nThis sounds very similar to what scalafmt currently does. Except, scalafmt tries first to align by the `(` before moving everything to 4 space indentation. I'm happy to add an option to disable that in the next release, see #241.\r\n\r\n> I haven't actually tried these with scalafmt, but that's sort of beside the point. \r\n\r\nHow is it beside the point? If you format this\r\n\r\n```scala\r\nfor {\r\n  a <- foo\r\n  abc <- bar\r\n  (stuff, and, things) = abc\r\n} yield stuffdi\r\n```\r\nwith the default scalafmt style you will get the exact same output back, **verbatim**. Scalafmt is for most parts context independent, FWIW [the tests](https://github.com/olafurpg/scalafmt/blob/master/core/src/test/resources/unit/Val.stat) run on single statements, not compilation units.\r\n\r\n> A dubious line to take with a code formatter. :-) It's all trivia.\r\n\r\nhehe, true, but some trivia is more important than other trivia 😜 \r\n\r\n> So ignoring the DSL case, that's really just two formatting options: same line, or next line. It's important to have those two\r\n\r\nFine. Opened #242.\r\n\r\n>  The \"minimum viable\" bar for me, personally, would be a sufficiently rich set of configuration options as to allow me to configure scalafmt to match that style\r\n\r\nI would be thrilled to add the official Scala style guide to the list of available styles in scalafmt, users could enable it with something like `--style scala-lang`. What do you consider to be missing? A good start here would be to open an issue with a single code example, show what scalafmt currently does and how it should look like to meet the official Scala coding style. In my experience, any description in English ends up being too ambiguous."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219521212",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219521212",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219521212,
      "user": {
        "login": "djspiewak",
        "id": 752,
        "avatar_url": "https://avatars.githubusercontent.com/u/752?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/djspiewak",
        "html_url": "https://github.com/djspiewak",
        "followers_url": "https://api.github.com/users/djspiewak/followers",
        "following_url": "https://api.github.com/users/djspiewak/following{/other_user}",
        "gists_url": "https://api.github.com/users/djspiewak/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/djspiewak/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/djspiewak/subscriptions",
        "organizations_url": "https://api.github.com/users/djspiewak/orgs",
        "repos_url": "https://api.github.com/users/djspiewak/repos",
        "events_url": "https://api.github.com/users/djspiewak/events{/privacy}",
        "received_events_url": "https://api.github.com/users/djspiewak/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-16 19:25:29 UTC",
      "updated_at": "2016-05-16 19:25:29 UTC",
      "body": "> How is it beside the point?\r\n\r\nMostly I was interested in exploring the general principle (context independence).  I guess this is an RFE on scalafmt though, and not a blog post, so point taken.  :-)\r\n\r\n> […] you will get the exact same output back, verbatim. Scalafmt is for most parts context independent, FWIW the tests run on single statements, not compilation units.\r\n\r\nGreat to hear!\r\n\r\nI will (in the next few days) try to throw scalafmt at a few of the more non-trivial codebases on my machine and see what happens.  The more I think about it, the more I really do want to use it (which is not something I would have said a few weeks ago, so apparently your talk was really fantastic).  I had been under the impression that I needed to first start by convincing you that rich configurability was a desirable feature in the first place, but if that's a non-argument, it's much better to just skip ahead and start distilling down the exact configuration required.\r\n\r\n> I would be thrilled to add the official Scala style guide to the list of available styles in scalafmt, users could enable it with something like --style scala-lang. What do you consider to be missing? A good start here would be to open an issue with a single code example, show what scalafmt currently does and how it should look like to meet the official Scala coding style.\r\n\r\nI think most of what I noticed was method parameter formatting was a problem, but I didn't dig in too closely.  Honestly, I'm primarily interested with making sure that all of the relevant \"do this, instead of this other thing\" points in the Scala Style Guide are configurable, rather than scalafmt already deciding to do it in that way.  Not sure if that makes sense, exactly.\r\n\r\nThe quote from Viktor in your talk is really compelling, describing a world in which style debates reduce to pull requests on a configuration file in the project root.  In order to do that, we need the configurability to be rich enough that teams *can* debate the the trivia which is more trivial than other trivia.  :-)\r\n\r\n> In my experience, any description in English ends up being too ambiguous.\r\n\r\nThis is absolutely the case.  The Scala Style Guide tries to be very example-heavy, but obviously it's still ambiguous."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/219561138",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/235#issuecomment-219561138",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/235",
      "id": 219561138,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-05-16 21:58:02 UTC",
      "updated_at": "2016-05-16 21:58:02 UTC",
      "body": ">  so apparently your talk was really fantastic\r\n\r\n^_^\r\n\r\n>  just realized that what I wanted to do was going to be a more significant project than I had anticipated,\r\n\r\nIn case you find time to hack on scalafmt, I added a tutorial in the [readme](/olafurpg/scalafmt) on how to add a new configuration flag.\r\n\r\n> mostly hard-coded and implemented in an ad hoc way\r\n\r\nYeah, code formatting seems to be a hairy business. I'm still quite proud by the fact that scalafmt/core is \"only\" at 2.8k LOC."
    }
  ],
  "created_at": "2016-05-15 18:43:17 UTC",
  "updated_at": "2016-05-16 21:58:02 UTC",
  "closed_at": null,
  "body": "Let's just call this a general desire for significantly more configurability in the formatting style.  Scalariform is a decent example, though it's missing plenty of stuff that I *would* want (line limits being a good example).  I think scalafmt is a far better foundation, but right now its lack of configurability basically prevents me from using it.  :-(\r\n\r\nSome general points:\r\n\r\n- **Configurability of vertical alignment**  I cannot stress this enough.  Vertical alignment is *not* a universal desire.  I find it almost unreadable (seriously), and while I know I'm in the minority, I'm certainly not the only one.  In general, what I want is the option to make intraline spacing rules context-free (outside of the indentation scope), rather than dependent on contents of the line above/below.\r\n- Dangling parentheses options.  Scalariform is pretty great in this regard, as it allows you to preserve parentheses, force them to their own line (like closing braces), or collapse them to the previous line.\r\n- Better control over parameter blocks linebreaking.  Right now, I believe scalafmt forces a style in which line-broken parameter blocks (actuals and formals) are vertically aligned with the first parameter, which is retained on the same line as the method name.  Some people like this style, while others (like me) would want this situation handled by single-indenting (for actuals) or double-indenting (for formals) and moving all parameters to their own line.\r\n\r\nThese are just the biggest ones that come to mind.  All in all, I think configurability is by far the most important feature for any formatter.  I understand the desire to be opinionated, but frankly that's a non-starter for a language as syntactically rich as Scala.  Also, I did try to implement this myself, but obviously the way configuration is done right now makes that a rather difficult affair."
}