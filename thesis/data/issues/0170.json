{
  "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
  "repository_url": "https://api.github.com/repos/olafurpg/scalafmt",
  "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170/labels{/name}",
  "comments_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170/comments",
  "events_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170/events",
  "html_url": "https://github.com/olafurpg/scalafmt/issues/170",
  "id": 148446674,
  "number": 170,
  "title": "Triple quoted strings and stripMargin.",
  "user": {
    "login": "paulp",
    "id": 9135,
    "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paulp",
    "html_url": "https://github.com/paulp",
    "followers_url": "https://api.github.com/users/paulp/followers",
    "following_url": "https://api.github.com/users/paulp/following{/other_user}",
    "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
    "organizations_url": "https://api.github.com/users/paulp/orgs",
    "repos_url": "https://api.github.com/users/paulp/repos",
    "events_url": "https://api.github.com/users/paulp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paulp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "milestone": {
    "url": "https://api.github.com/repos/olafurpg/scalafmt/milestones/3",
    "html_url": "https://github.com/olafurpg/scalafmt/milestones/0.2.3",
    "labels_url": "https://api.github.com/repos/olafurpg/scalafmt/milestones/3/labels",
    "id": 1719323,
    "number": 3,
    "title": "0.2.3",
    "description": "",
    "creator": {
      "login": "olafurpg",
      "id": 1408093,
      "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olafurpg",
      "html_url": "https://github.com/olafurpg",
      "followers_url": "https://api.github.com/users/olafurpg/followers",
      "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
      "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
      "organizations_url": "https://api.github.com/users/olafurpg/orgs",
      "repos_url": "https://api.github.com/users/olafurpg/repos",
      "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olafurpg/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 5,
    "state": "closed",
    "created_at": "2016-04-19 21:40:01 UTC",
    "updated_at": "2016-05-06 17:24:27 UTC",
    "due_on": null,
    "closed_at": "2016-05-06 17:24:27 UTC"
  },
  "comments": [
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210378319",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210378319",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210378319,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 09:20:39 UTC",
      "updated_at": "2016-04-15 09:20:39 UTC",
      "body": "`--alignStripMarginStrings false` disables this feature. It's true that stripMargin could be anything since scalafmt has no semantic information. However, for most use-cases I think it is safe to assume that it's the standard library `stripMargin`."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210471153",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210471153",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210471153,
      "user": {
        "login": "paulp",
        "id": 9135,
        "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulp",
        "html_url": "https://github.com/paulp",
        "followers_url": "https://api.github.com/users/paulp/followers",
        "following_url": "https://api.github.com/users/paulp/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
        "organizations_url": "https://api.github.com/users/paulp/orgs",
        "repos_url": "https://api.github.com/users/paulp/repos",
        "events_url": "https://api.github.com/users/paulp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulp/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 13:50:46 UTC",
      "updated_at": "2016-04-15 13:50:46 UTC",
      "body": "I think you should seriously reconsider this.\r\n\r\nConvenience is Tail. Correctness is Dog. You are taking the position that it's OK for the code formatter to break code if someone is unlucky enough to choose stripMargin as a method name. Do you know what kind of burden it is to sift through a large corpus of scala code to discover what the formatter might have broken, so that you can later discover which options you were supposed to disable so as to avoid that?\r\n\r\nWhat you are doing is very, very ad hoc, in a manner which is certain to burn people, for minimal benefit. Flip the option to ``--assumeStandardLibraryStripMargin`` or something and let any damage be self-inflicted."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210475038",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210475038",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210475038,
      "user": {
        "login": "paulp",
        "id": 9135,
        "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulp",
        "html_url": "https://github.com/paulp",
        "followers_url": "https://api.github.com/users/paulp/followers",
        "following_url": "https://api.github.com/users/paulp/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
        "organizations_url": "https://api.github.com/users/paulp/orgs",
        "repos_url": "https://api.github.com/users/paulp/repos",
        "events_url": "https://api.github.com/users/paulp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulp/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 14:02:48 UTC",
      "updated_at": "2016-04-15 14:02:48 UTC",
      "body": "Just in the repositories I have cloned locally, which is probably fewer than 1/10000 of all scala repositories:\r\n```scala\r\nscalikejdbc/scalikejdbc-core/src/main/scala/scalikejdbc/interpolation/SQLSyntax.scala\r\n187:  def stripMargin: SQLSyntax = new SQLSyntax(value.stripMargin, parameters)\r\n189:  def stripMargin(marginChar: Char): SQLSyntax = new SQLSyntax(value.stripMargin(marginChar), parameters)\r\n\r\nscalikejdbc/scalikejdbc-core/src/main/scala/scalikejdbc/SQL.scala\r\n480:  def stripMargin(marginChar: Char): SQL[A, E] =\r\n484:  def stripMargin: SQL[A, E] =\r\n\r\nspecs2/core/src/main/scala/org/specs2/specification/core/Description.scala\r\n17:  def stripMargin(margin: Char): Description = this\r\n18:  def stripMargin: Description = stripMargin('|')\r\n27:  override def stripMargin(margin: Char) = copy(text.stripMargin(margin))\r\n36:  override def stripMargin(margin: Char) = copy(text.stripMargin(margin))\r\n\r\nspecs2/core/src/main/scala/org/specs2/specification/core/Fragments.scala\r\n69:  def stripMargin: Fragments = stripMargin('|')\r\n72:  def stripMargin(margin: Char): Fragments = mapDescription(_.stripMargin(margin))\r\n\r\nspray/spray-util/src/main/scala/spray/util/pimps/PimpedString.scala\r\n99:  def stripMarginWithNewline(newline: String) = underlying.stripMargin.replace(\"\\r\\n\", \"\\n\").replace(\"\\n\", newline)\r\n```"
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210477149",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210477149",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210477149,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 14:09:48 UTC",
      "updated_at": "2016-04-15 14:09:48 UTC",
      "body": "Wow. I admit it was naive to assume `stripMargin` would always come from the std lib. I agree that `--assumeStandardLibraryStripMargin` with default value false is more sensible. Thanks for raising this up, I'll try to address it asap."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210500833",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210500833",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210500833,
      "user": {
        "login": "olafurpg",
        "id": 1408093,
        "avatar_url": "https://avatars.githubusercontent.com/u/1408093?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/olafurpg",
        "html_url": "https://github.com/olafurpg",
        "followers_url": "https://api.github.com/users/olafurpg/followers",
        "following_url": "https://api.github.com/users/olafurpg/following{/other_user}",
        "gists_url": "https://api.github.com/users/olafurpg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/olafurpg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/olafurpg/subscriptions",
        "organizations_url": "https://api.github.com/users/olafurpg/orgs",
        "repos_url": "https://api.github.com/users/olafurpg/repos",
        "events_url": "https://api.github.com/users/olafurpg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/olafurpg/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 15:14:35 UTC",
      "updated_at": "2016-04-15 15:14:35 UTC",
      "body": "I want to add that I take it very seriously that scalafmt never messes with semantics. Part of the test suite is verifying that scalafmt formatted code [preserves the AST of the original code](https://github.com/olafurpg/scalafmt/blob/a5066da3a3f074ab2b426a553724265b146852c6/core/src/test/scala/org/scalafmt/util/FormatAssertions.scala#L18). The tests run against ~10k Scala source files from akka, spark, intellij-scala and few more project. For obvious reasons, `--alignStripMarginStrings` is disabled in these tests (which should have raised more warnings when I think about it)."
    },
    {
      "url": "https://api.github.com/repos/olafurpg/scalafmt/issues/comments/210518294",
      "html_url": "https://github.com/olafurpg/scalafmt/issues/170#issuecomment-210518294",
      "issue_url": "https://api.github.com/repos/olafurpg/scalafmt/issues/170",
      "id": 210518294,
      "user": {
        "login": "paulp",
        "id": 9135,
        "avatar_url": "https://avatars.githubusercontent.com/u/9135?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paulp",
        "html_url": "https://github.com/paulp",
        "followers_url": "https://api.github.com/users/paulp/followers",
        "following_url": "https://api.github.com/users/paulp/following{/other_user}",
        "gists_url": "https://api.github.com/users/paulp/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/paulp/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/paulp/subscriptions",
        "organizations_url": "https://api.github.com/users/paulp/orgs",
        "repos_url": "https://api.github.com/users/paulp/repos",
        "events_url": "https://api.github.com/users/paulp/events{/privacy}",
        "received_events_url": "https://api.github.com/users/paulp/received_events",
        "type": "User",
        "site_admin": false
      },
      "created_at": "2016-04-15 15:54:11 UTC",
      "updated_at": "2016-04-15 15:54:11 UTC",
      "body": "That's reassuring. I suggest verifying AST invariance on all the projects in the [community build](https://github.com/scala/community-builds). If you really want to test it, run it against [psp-std](https://github.com/paulp/psp-std), where you stand a great chance of flushing out more hidden assumptions. psp-std is built with `-Yno-predef -Yno-imports` and little else in the world works as hard to avoid the standard library."
    }
  ],
  "created_at": "2016-04-14 18:35:05 UTC",
  "updated_at": "2016-05-06 16:17:12 UTC",
  "closed_at": "2016-05-06 16:14:15 UTC",
  "body": "Original:\r\n```scala\r\nobject Generator {\r\n  def template = s\"\"\"\r\n    |package psp\r\n    |package tests\r\n    |package generated\r\n    |\r\n    |object Expressions {\r\n    |  ${ vals mkString \"\\n\" }\r\n    |}\"\"\".stripMargin\r\n}\r\n```\r\n\r\nScalafmt:\r\n```scala\r\nobject Generator {\r\n  def template = s\"\"\"\r\n                    |package psp\r\n                    |package tests\r\n                    |package generated\r\n                    |\r\n                    |object Expressions {\r\n                    |  ${vals mkString \"\\n\"}\r\n                    |}\"\"\".stripMargin\r\n}\r\n```\r\n\r\nI would like the input to look like the original. That's the inside of an interpolated string you're reformatting! It looks like it behaves differently if I call `.dingo` instead of `.stripMargin`. But you have no way of knowing what that call to stripMargin does! You can't assume it's a call to the standard library's stripMargin method simply because it happens to share the name.\r\n\r\nOutput collected with scalafmt 0.2.1."
}