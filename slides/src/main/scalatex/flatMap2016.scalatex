@import com.geirsson.reavealjs.RevealJs._

@slide
  @(style := "text-align: left;")
  @h1
    scalafmt
  @p
    Opinionated, automatic code formatter for Scala
  @p
    - Ólafur Geirsson, @@olafurpg
@skipSlide
  @p
    Let me start with a quick survey, how many in this room use code formatters?
    How many have tried scalafmt? Okay, good to know.
    I've been passionate about code formatting for a while now.
    Almost a year ago I chose to work on a project at Google to increase
    adoption of clang-format in C++ projects.
    In the process, I learned a lot both why people like code formatters and why
    they don't like them.
    For my master's thesis, I wanted to bring a proper code formatter to the Scala community.
    I contacted Eugene, the author of Scala macros and scala.meta, in November.
    I believe we've solved many interesting challenges since then and
    I'm really excited to share with you where we are today.
@slide
  @ol
    @li
      Why?
    @li
      Demo.
    @li
      When it fails.
    @li
      How it works.
@wrap
  @slide
    @h1
      1. WHY?
  @slide
    @h3
      Reason 1: Time sink
    @p
      @img(src:="img/time-sink.png")
  @slide
    @p
      @img(src:="img/klang.png")
  @slide
    @h3
      Reason 2: Refactoring
    @p
      @img(style:="width: 100%;", src:="img/clangmr.png")
    @p
      @(fontSize := "0.8em")
      Wright et al., “Large-Scale Automated Refactoring Using ClangMR.”
  @slide
    @p
      @img(style:="width: 100%;", src:="img/refactoring-intellij.png")
  @slide
    @h3
      Reason 3: It's tedious
    @highlight
      // Columns 80                                                                  |
      case class Split(modification: Modification,
                       cost: Int,
                       ignoreIf: Boolean = false,
                       indents: Vector[Indent[Length]],
                       policy: Policy = NoPolicy,
                       penalty: Boolean = false,
                       optimalAt: Option[OptimalToken] = None)
  @slide
    @highlight
      // Columns 80                                                                  |
      case class Split(modification: Modification,
                       cost: Int,
                       ignoreIf: Boolean = false,
                       indents: Vector[Indent[Length]] = Vector.empty[Indent[Length]],
                       policy: Policy = NoPolicy,
                       penalty: Boolean = false,
                       optimalAt: Option[OptimalToken] = None)(implicit val line: sourcecode.Line)
  @slide
    @highlight
      // Columns 80                                                                  |
      case class Split(
          modification: Modification,
          cost: Int,
          ignoreIf: Boolean = false,
          indents: Vector[Indent[Length]] = Vector.empty[Indent[Length]],
          policy: Policy = NoPolicy,
          penalty: Boolean = false,
          optimalAt: Option[OptimalToken] = None)(implicit val line: sourcecode.Line)
  @slide
    @h3
      Reason 4: Coding styles are hard
    @p
      @img(style:="width: 100%;", src:="img/coding-style.png")
  @slide
    @blockquote
      "Any style guide written in English is either so brief that it’s ambiguous, or so long that no one reads it." @br
      @p
        @(fontSize := "0.6em")
        -- Bob Nystrom, @a(href:="http://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written/", "Hardest Program I've Ever Written")
        , Dart, Google.
  @slide
    @p
      @img(style:="width: 100%;", src:="img/challenge-accepted.jpg")
@wrap
  @slide
    @h1
      2. Demo
  @skipSlide
    @embedVideo("video/demo.mp4")
  @slide
    @hl.diff
       -  protected def SocketOptionLimited[A: FrameFormatter](consumer: TokenBucket.Consumer, name: String)(f: Context => Fu[Option[(Iteratee[A, _], Enumerator[A])]]) =
       +  protected def SocketOptionLimited[A : FrameFormatter](
       +      consumer: TokenBucket.Consumer, name: String)(
       +      f: Context => Fu[Option[(Iteratee[A, _], Enumerator[A])]]) =
  @slide
    @ul
      @li
        SBT "com.geirsson" %% "sbt-scalafmt" % "0.2.X"
      @li
        IntelliJ plugin
      @li
        @code("brew install scalafmt")
      @li
        Download @code("scalafmt.jar") via Github releases.
      @li
        See @a(href:= "http://scalafmt.org", "official documentation").
  @slide
    @h3
      Where are we now?
    @ul
      @li
        Can format almost any Scala code.
      @li
        Formatting options:
        @ul
          @li
            --style default,
          @li
            --style defaultWithAlign,
          @li
            --style scalaJs (experimental)
          @li
            --maxColumn 120
          @li
            --javaDocs / --scalaDocs
          @li
            --continuationIndentCallSite 2
@wrap
  @slide
    @h1
      3. Making of scalafmt
  @skipSlide
    @h3
      Opinionated?
    @blockquote
      "Has line-length setting." @br
      - Ólafur Geirsson
  @skipSlide
    @h3
      Line length
    @blockquote
      “when reviewing on GitHub, only 120 characters are visible; when reviewing on a mobile phone, only 80 characters are visible. And we do review on mobile phone quite a lot.”
    @p
      –Sébastien Doeraene, Scala.js
  @skipSlide
    @tabulate(Seq("", "Line length"),
              Seq(
                  Seq("scalafmt",     "✔"),
                  Seq("scalariform",  " "),
                  Seq("clang-format", "✔"),
                  Seq("gofmt",        " "),
                  Seq("dartfmt",      "✔")
              ),
              Map(1 -> "center", 2 -> "center"))
  @slide
    @h3
      Best first search
    @highlight
      // 50 columns                                    |
      object BestFirstSearch {
        DBObject(Some(Name("Martin", "Odersky"), Language("Scala")), Address("Lausanne", "Switzerland"))

        DBObject(
            Some(Name("Martin", "Odersky"), Language("Scala")), Address("Lausanne", "Switzerland"))

        DBObject(Some(Name("Martin", "Odersky"), Language("Scala")),
                 Address("Lausanne", "Switzerland"))

        DBObject(
            Some(Name("Martin", "Odersky"), Language("Scala")),
            Address("Lausanne", "Switzerland"))

        DBObject(Some(Name("Martin", "Odersky"),
                      Language("Scala")),
                 Address("Lausanne", "Switzerland"))

      }
  @skipSlide
    @h3
      Pop Quiz: is Policy a monoid? :)
    @highlight
      case class Policy(f: PartialFunction[Decision, Decision], expire: Token) {
        def andThen(g: Policy): Policy = ...
      }

      object Policy {
        val empty: Policy = ...

        // Disallows newlines until `expire` token.
        val singleLine = Policy({
          case Decision(token, splits) =>
            Decision(token, splits.filterNot(_.modification.isNewline))
        }, expire)

        // Penalizes newlines with `penalty` until `expire` token.
        def penalizeNewlines(penalty: Int) = Policy({
          case Decision(token, s) =>
            Decision(token,
                     s.map(x => x.withPenalty(if (x.isNewline) penalty else 0)))
        }, expire)
      }
  @slide
    @h3
      scala.meta
    @ul
      @li
        Tokenizer: String => scala.meta.Token
      @li
        Parser: String => scala.meta.Tree
    @highlight
      scala> import scala.meta._
      scala> """object Main extends App { world =>
                  println(s"Hello $world!")
                }
                """.parse[Stat].get.show[Structure]
      res9: String = """
      Defn.Object(Nil, Term.Name("Main"),
                  Template(Nil, Seq(Ctor.Ref.Name("App")),
                  Term.Param(Nil, Term.Name("world"), None, None),
                  Some(Seq(Term.Apply(Term.Name("println"),
                                      Seq(Term.Interpolate(Term.Name("s"),
                                                           Seq(Lit("Hello "),
                                                           Lit("!")),
                                                           Seq(Term.Name("world")))))))))
      """
  @slide
    @h3
      More important problems, vertical alignment
    @p
      @highlight
        object VerticalAlignment {
          x match {
            case 1  => 1  -> 2  // first
            case 11 => 11 -> 22 // second
          }

          def name   = column[String]("name")
          def status = column[Int]("status")

          for {
            dao  <- olafur   \/> "Can't find olafur"
            user <- dao.user \/> "Join failed: no user object"
          }

          libraryDependencies ++= Seq(
            "org.scalameta" %  "scalameta"  % "0.1.0-RC4-M10",
            "com.lihaoyi"   %% "sourcecode" % "0.1.1"
          )
        }
@wrap
  @slide
    @h1
      Conclusion
  @slide
    @h3
      Roadmap
    @ul
      @li
        Bugs, please report weird formatting output!
      @li
        More coding styles: spark, typelevel, ...
      @li
        Coding style detection / better migration experience
      @li
        Format @code("git diff").
      @li
        Format docstrings.
      @li
        Incremental formatting.
      @li
        scala-tidy
  @slide
    @(style := "text-align: left;")
    @h1
      THANK YOU
    @p
        - @a(href:="http://scalafmt.org", "Visit documentation.") @br
        - @a(href:="http://github.com/olafurpg/scalafmt", "Contribute with PRs and reporting issues.") @br
        - @a(href:="http://twitter.com/olafurpg", "Follow @olafurpg on Twitter.") @br
        - @a(href:="http://gitter.im/olafurpg/scalafmt", "Chat on Gitter.")
